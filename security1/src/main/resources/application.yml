spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/security?serverTimezone=Asia/Seoul
    username: maeng0830
    password: '!@aud221166'

  jpa:
    hibernate:
      ddl-auto: create #create update none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 674164529701-c9s233uanin4reqfifpr576j40kvo9ue.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
          facebook:
            client-id: 929028471585510
            client-secret: 25c29d46a66c700fbb5e6457c8a18721
            scope:
              - email
              - public_profile
          naver:
            client-id: iBlqC53UWmfS615qnLUl
            client-secret: mmW1Y8iFl4
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver #네이버는 주소가 고정은 아니다. 그렇지만 표준을 따르자

        provider: # 네이버는 provider가 등록되어있지 않기 때문에 직접 등록해준다.
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원 정보를 json으로 받으며, 네이버가 response라는 key값으로 리턴해준다.